


// This is your test secret API key.
const stripe = require('stripe')('sk_test_51QEzOZKQ7pECBtXLn75fymEXXTbwtwYhLfA3S9ZSzJuyWQmUeIXNt5124lXxXNt6cskw0G5K3dvrHmZhr7s3VZA4007RWFvMgE');
const express = require('express');
const cors = require('cors');
const app = express();

// Middleware
app.use(express.static('public'));
app.use(express.json()); // Parse JSON bodies
app.use(cors({ origin: 'http://127.0.0.1:5501' })); // Allow requests from your live server

const YOUR_DOMAIN = 'http://127.0.0.1:5501';

// Create Checkout Session
app.post('/create-checkout-session', async (req, res) => {
  const { willType, deliveryMethod } = req.body;

  // Determine the price ID based on user selections
  let priceId = '';
  if (willType === 'single' && (deliveryMethod === 'digitalDownload' || deliveryMethod === '1stClassPost')) {
    priceId = 'price_1QPS6EKQ7pECBtXLvFR2C9Nj'; // Replace with actual Price ID for single will + digital/postage
  } else if (willType === 'couple' && (deliveryMethod === 'digitalDownload' || deliveryMethod === '1stClassPost')) {
    priceId = 'price_1QPS6FKQ7pECBtXLvFR2C9Nj'; // Replace with actual Price ID for couple will + digital/postage
  } else if (willType === 'single' && deliveryMethod === 'priorityReview') {
    priceId = 'price_1QPS6GKQ7pECBtXLvFR2C9Nj'; // Replace with actual Price ID for single will + priority review
  } else if (willType === 'couple' && deliveryMethod === 'priorityReview') {
    priceId = 'price_1QPS6HKQ7pECBtXLvFR2C9Nj'; // Replace with actual Price ID for couple will + priority review
  } else {
    res.status(400).send({ error: 'Invalid selection' });
    return;
  }

  try {
    const session = await stripe.checkout.sessions.create({
      ui_mode: 'embedded',
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      mode: 'payment',
      return_url: `${YOUR_DOMAIN}/return.html?session_id={CHECKOUT_SESSION_ID}`,
    });

    res.send({ clientSecret: session.client_secret });
  } catch (error) {
    console.error('Error creating checkout session:', error);
    res.status(500).send({ error: 'Failed to create checkout session' });
  }
});

// Get Session Status
app.get('/session-status', async (req, res) => {
  try {
    const session = await stripe.checkout.sessions.retrieve(req.query.session_id);

    res.send({
      status: session.status,
      customer_email: session.customer_details.email,
    });
  } catch (error) {
    console.error('Error retrieving session status:', error);
    res.status(500).send({ error: 'Failed to retrieve session status' });
  }
});

// Start the server
app.listen(5501, () => console.log('Running on port 4242'));












<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="/assets/css/style.css" />

  </head>
  <body>
	<div id="page" class="site">
		<div class="container">
			<form-box>
				<div class="progress">
					<div class="logo"><a href="/assets/images/logo/logo-2.svg"><span>.web</span>design</a></div>
					<ul class="progress-step">
						<li class="step active">
							<span>1</span>
							<p>Personal<br><span>2min</span></p>
						</li>
						<li class="step">
							<span>2</span>
							<p>Another<br><span>2min</span></p>
						</li>
						<li class="step">
							<span>3</span>
							<p>Third<br><span>5min</span></p>
						</li>
					</ul>
				</div>
				<form action="">
					<div class="form-one form-step">
						<div class="bg-svg"></div>
						<h2>Personal</h2>
						<p>Enter your perosnal information correctly</p>
						<div>
							<label>First Name</label>
							<input type="text" placeholder="e.g Jane">
						</div>
						<div>
							<label>Last Name</label>
							<input type="text" placeholder="e.g Doe">
						</div>
						<div class="birth">
							<label>Date of birth</label>
							<div class="grouping">
								<input type="text" patter="[0-9]*" name="Day" velue="'" min="0" max="31">
								<input type="text" patter="[0-9]*" name="Month" velue="'" min="0" max="12">
								<input type="text" patter="[0-9]*" name="Year" velue="'" min="0" max="2025">
							</div>
						</div>
					</div>
					<div class="form-two form-step">
						<div class="bg-svg"></div>
						<h2>Contact information</h2>
						 <div>
							<lable>Phone</lable>
							<input type="tel" placeholder="+44">
						 </div>

						 <div>
							<lable>Address</lable>
							<input type="text"> placeholder="Street Name"
						 </div>
						 <div>
							<input type="text"> placeholder="App,Suit,Building"
						 </div>

						 <div>
							<lable>City</lable>
							<input type="text"> placeholder="City"
						 </div>

						 <div>
							<lable>State</lable>
							<input type="text"> placeholder="State/province"
						 </div>

						 <div>
							<lable>Postcode</lable>
							<input type="text"> placeholder="Postal Code"
						 </div>
						 <div>
							<lable>Country</lable>
							<select name="Country" id="Country">
								<option value="">Please select</option>
								<option value="">Afghanistan</option>
							</select>
							<div class="form-three form-step">
								<div class="bg-svg"></div>
								<h2>Security</h2>
								<div>
									<label>Email</label>
									<input type="email" placeholder="Youremail address">
								</div>
								<div>
									<label>Password</label>
									<input type="password" placeholder="Password">
								</div>
								<div>
									<input type="password" placeholder="confirm password">
								</div>
								<div class="checkbox">
									<input type="checkbox">
									<label>Recieve our newsletter and special offers</label>
								</div>
							</div>
						 </div>
						 <div class="btn-group">
							<button type="button" class="btn-prev" disabled>Back</button>
							<button type="button" class="btn-prev">Next Step</button>
							<button type="button" class="btn-prev">Submit</button>
						 </div>
					</div>
				</form>
			</form-box>
		</div>
	</div>
	<script src="./script.js"></script>

  </body>
</html>




/* css /*

:root {
    --main-color: #6e35ff;        
    --secondary-color: #b99efb;  
    --lighter-color: #dfdde5;  
    --light-color: #cccccc; 
    --dark-color: #1e065b;     

    --font-smaller: 14px;
    --font-bigger: 20px;

}
*{
    margin: 0;
    padding: 0;
}
*,::before,::after{
    box-sizing: border-box;
}
html{
    scroll-behavior: smooth;
}
body {  
    font-family: "nunito", sans-serif;
    font-size: 16px;
    font-weight: 400;
    line-height: 1.8;
    color: var(--dark-color);
    background: var(--dark-color);
}
a{
    text-decoration: none;
    color: inherit;
}
ul{
    list-style: none;
}
h1,h2,h3 {
    font-weight: 700;
    line-height: 1.25;
    margin: 0 0 0.5em;
}
img {
    max-width: 100px;
    vertical-align: middle;
}
.container {
    max-width: 1100px;
    margin: 0 auto;
    padding: 0 2em;
}
.form.box {
    display: flex;
    flex-direction: row;
    margin-top: 5em;
    border: 8px solid var(--light-color);
    border-radius: 15px;
    background-color: #f0ffff;
}
/* progress */
.form.box .progress {
    position: relative;
    padding: 1em;
}
.logo {
    font-size: 1.75em;
    font-weight: 800;
    color: var(dark-color);
    padding: 40px 48px;
    text-align: center;
}
.logo span {
    color: var(--main-color);
}

/* progress step */
.progress el.progress-step {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 2em;
}
.progress el.progress-step li {
    position: relative;
    display: flex;
    align-items: flex-start;
    margin-bottom: 2em;
}
.progress el.progress-step li > span {
    position: relative;
    width: 40px;
    height: 40px;
    font-size: var(--font-smaller);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1em;
    border-radius: 50%;
    background-color: var(--light-color);
    z-index: 1;
}
.progress el.progress-step li.active > span {
    color: white;
    background-color: var(--main-color);
    border: 4px solid var(--secondary-color);
    z-index: 1;
}
.progress el.progress-steps li p span {
    font-size: var(--font-smaller);
    color: var(--light-color);

}



@media screen and (min-width:768px) {
    .form.box .progress {
        flex: 1 0 35%;
        min-width: 300px;
        padding: 3em;
    }
    .logo {
        margin
        : -48px -48px 48px;
    }
    .progress el.progress-step {
        flex-direction: column;
        gap: 0;
    }
    .progress el.progress-steps li:not(:last-child)::before {
        content: '';
        position: absolute;
        left: 20px;
        top: 30px;
        width: 2px;
        height: 65px;
        background-color: var(--lighter-color);
    }
}

  